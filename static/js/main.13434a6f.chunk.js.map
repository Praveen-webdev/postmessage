{"version":3,"sources":["components/SenderPanel.js","components/ReceiverPanel.js","App.js","reportWebVitals.js","index.js"],"names":["SenderPanel","_ref","receiverRef","message","setMessage","useState","safeOrigin","setSafeOrigin","React","createElement","className","placeholder","value","onChange","e","target","style","marginBottom","display","gap","type","width","padding","fontSize","marginRight","onClick","targetOrigin","current","postMessage","alert","sendMessage","ReceiverPanel","logs","setLogs","originCheck","setOriginCheck","window","location","origin","handleMessage","event","_data$type","data","startsWith","passedCheck","prevLogs","timestamp","Date","toLocaleTimeString","JSON","stringify","useEffect","addEventListener","removeEventListener","color","marginTop","map","log","index","key","App","receiverType","setReceiverType","receiverUrl","setReceiverUrl","useRef","checked","createReceiver","open","document","write","iframe","getElementById","src","srcdoc","contentWindow","id","title","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.13434a6f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst SenderPanel = ({ receiverRef }) => {\n  const [message, setMessage] = useState(\"\");\n  const [safeOrigin, setSafeOrigin] = useState(\"*\");\n\n  const sendMessage = (targetOrigin) => {\n    if (receiverRef.current) {\n      receiverRef.current.postMessage(message, targetOrigin);\n    } else {\n      alert(\"The receiver has not been created yet.\");\n    }\n  };\n\n  return (\n    <div className=\"panel sender-panel\">\n      <h2>Sender Panel</h2>\n      <textarea\n        placeholder=\"Enter your message here\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <div style={{ marginBottom: \"10px\",display: \"flex\", gap: \"5px\" }}>\n        <input\n          type=\"text\"\n          value={safeOrigin}\n          onChange={(e) => setSafeOrigin(e.target.value)}\n          placeholder=\"Enter origin\"\n          style={{\n            width: \"calc(70% - 10px)\",\n            padding: \"8px\",\n            fontSize: \"14px\",\n            marginRight: \"10px\",\n          }}\n        />\n        <button\n          onClick={() => sendMessage(safeOrigin)}\n          style={{ width: \"28%\" }}\n          className=\"primary-button\"\n        >\n          Send Message\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SenderPanel;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\n\nconst ReceiverPanel = () => {\n  const [logs, setLogs] = useState([]);\n  const [originCheck, setOriginCheck] = useState(window.location.origin);\n\n  const handleMessage = (event) => {\n    const { data, origin } = event;\n\n    // Filter out unwanted messages\n    if (typeof data === \"object\" && data.type?.startsWith(\"webpack\")) {\n      return;\n    }\n    if (typeof data === \"string\" && data.startsWith(\"webpack\")) {\n      return;\n    }\n\n    const passedCheck = origin === originCheck;\n\n    setLogs((prevLogs) => [\n      ...prevLogs,\n      {\n        timestamp: new Date().toLocaleTimeString(),\n        data: typeof data === \"object\" ? JSON.stringify(data) : data, // Ensure data is a string\n        origin,\n        passedCheck,\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"message\", handleMessage);\n    return () => window.removeEventListener(\"message\", handleMessage);\n  }, [originCheck]);\n\n  return (\n    <div className=\"panel receiver-panel\">\n      <h2>Receiver Panel</h2>\n      <label>\n        Origin Check:\n        <input\n          type=\"text\"\n          value={originCheck}\n          onChange={(e) => setOriginCheck(e.target.value)}\n        />\n      </label>\n      <p style={{ fontSize: \"12px\", color: \"gray\", marginTop: \"4px\" }}>\n        Check for the origin and process the data\n      </p>\n      <div className=\"log-viewer\">\n        {logs.map((log, index) => (\n          <div\n            key={index}\n            className={`log-entry ${\n              log.passedCheck ? \"log-accepted\" : \"log-rejected\"\n            }`}\n          >\n            [{log.timestamp}] {log.origin}: {log.data} (\n            {log.passedCheck ? \"Accepted\" : \"Rejected\"})\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ReceiverPanel;\n","import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport SenderPanel from \"./components/SenderPanel\";\nimport ReceiverPanel from \"./components/ReceiverPanel\";\n\nfunction App() {\n  const [receiverType, setReceiverType] = useState(\"popup\"); // 'popup' or 'iframe'\n  const [receiverUrl, setReceiverUrl] = useState(\"\"); // URL to open\n  const receiverRef = useRef(null);\n\n  const createReceiver = () => {\n    if (receiverType === \"popup\") {\n      receiverRef.current = window.open(\n        receiverUrl || \"\",\n        \"Receiver\",\n        \"width=600,height=400,left=200,top=200\"\n      );\n      // receiverRef.current.opener = null;\n      if (!receiverUrl) {\n        receiverRef.current.document.write(`\n          <div id=\"root\">Receiver panel</div>\n          <div id=\"log\"></div>\n          <script>\n            window.addEventListener('message', (event) => {\n              const logDiv = document.getElementById('log');\n              const message = document.createElement('div');\n              message.textContent = 'Received: ' + JSON.stringify(event.data);\n              logDiv.appendChild(message);\n            });\n          </script>\n        `);\n      }\n    } else if (receiverType === \"iframe\") {\n      const iframe = document.getElementById(\"receiverIframe\");\n      if (receiverUrl) {\n        iframe.src = receiverUrl;\n      } else {\n        iframe.srcdoc = `\n          <h3 id=\"root\">Receiver Iframe</h3>\n          <div id=\"log\"></div>\n          <button id=\"sendMessage\">Send Message to Parent</button>\n          <script>\n            // Send a message to the parent window\n            document.getElementById('sendMessage').addEventListener('click', () => {\n              window.parent.postMessage({ type: 'fromIframe', content: 'Hello Parent!' }, '*');\n            });\n\n            // Listen for messages from any source\n            window.addEventListener('message', (event) => {\n              const logDiv = document.getElementById('log');\n              const message = document.createElement('div');\n              message.textContent = 'Received: ' + JSON.stringify(event.data);\n              logDiv.appendChild(message);\n            });\n          </script>\n        `;\n      }\n      receiverRef.current = iframe.contentWindow;\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h2>Controller</h2>\n      <div className=\"receiver-type-selector\">\n        <label>\n          <input\n            type=\"radio\"\n            value=\"popup\"\n            checked={receiverType === \"popup\"}\n            onChange={() => setReceiverType(\"popup\")}\n          />\n          Popup\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"iframe\"\n            checked={receiverType === \"iframe\"}\n            onChange={() => setReceiverType(\"iframe\")}\n          />\n          Iframe\n        </label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter URL to open\"\n          value={receiverUrl}\n          onChange={(e) => setReceiverUrl(e.target.value)}\n        />\n        <button className=\"secondary-button\" onClick={createReceiver}>Create Receiver</button>\n      </div>\n      <div className=\"panels\">\n        <SenderPanel receiverRef={receiverRef} />\n        <ReceiverPanel />\n      </div>\n      {receiverType === \"iframe\" && (\n        <iframe\n          id=\"receiverIframe\"\n          title=\"Receiver\"\n          className=\"receiver-iframe\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}